@page "/admin/users"
@inject IDialogService DialogService
@using Front.Services
@inject ISnackbar Snackbar

<div>
    <AdminMenu/>
</div>


<div>
<MudDataGrid Context="context" Items="@Users" Filterable="true" FilterMode="@_filterMode" FilterCaseSensitivity="@_caseSensitivity">
    <Columns>
        <PropertyColumn Property="x => x.FirstName" Title="Имя" Filterable="true" />
        <PropertyColumn Property="x => x.SurName" Title="Фамилия" Filterable="true" />
        <PropertyColumn Property="x => x.Email" Title="Почта" />
        <PropertyColumn Property="@(x => GetStringStatus(x.Status))"  Title="Права" Filterable="true" />
        <PropertyColumn Property="x => x.Company" Title="Организация" Filterable="true" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                        @{
                            if (context.Item.Status == 0)
                            {
                                <MudButton 
                                    Class="rounded-pill"
                                    ButtonType="ButtonType.Reset"  
                                    Size="@Size.Small"
                                    OnClick="@(()=> ChangeStatus(context, 1))"
                                    Variant="Variant.Outlined"
                                    EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowUp"
                                    Color="Color.Tertiary">
                                    Назначить модератором
                                </MudButton>
                            }
                            else if (context.Item.Status == 1)
                            {
                                <MudButton 
                                    Class="rounded-pill"
                                    ButtonType="ButtonType.Reset" 
                                    Size="@Size.Small" 
                                    Variant="@Variant.Outlined" 
                                    Color="@Color.Warning"
                                    EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowDown"
                                    OnClick="@(()=> ChangeStatus(context, 0))">
                                    Сделать пользователем
                                </MudButton>
                            }

                        }
                        <MudIconButton 
                            Icon="@Icons.Material.Filled.Delete"
                            ButtonType="ButtonType.Reset" 
                            Size="@Size.Medium" 
                            Variant="@Variant.Filled" 
                            Color="@Color.Error" 
                            OnClick="@(()=> Delete(context))">
                            Удалить
                        </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserResponse" />
    </PagerContent>
</MudDataGrid>
</div>
@*     <Dialog @bind-Visible="showDialog">
    <DialogTitle>Confirm Delete</DialogTitle>
    <DialogContent>
    Are you sure you want to delete this user?
    </DialogContent>
    <DialogFooter>
    <button @onclick="DeleteUser">Yes</button>
    <button @onclick="Cancel">No</button>
    </DialogFooter>
    </Dialog> *@


@code {
    [Inject] IAdminService _adminService { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    List<UserResponse> Users = new List<UserResponse>();
    public const int ADMIN_STATUS = 2;
    int buffStatus = 0;

    private bool dialogOpened = false;

    private async Task Delete(CellContext<UserResponse> u)
    {
        var result = await DialogService.ShowMessageBox("Вы уверены что хотите\n удалить пользователя?", "", "Yes", "No", null, null);
        if (result == false) return;

        var isDeleted = await _adminService.DeleteUser(u.Item.Id);

        if (isDeleted)
        {
            Snackbar.Add("Успешно!", Severity.Success);
            Users.Remove(u.Item);
        }
        else
        {
            Snackbar.Add("Ошибка удаления!", Severity.Error);
        }
    }

    private async Task ChangeStatus(CellContext<UserResponse> u, int status)
    {
        var result = await DialogService.ShowMessageBox("Вы уверены что хотите\n изменить права пользователя?", "", "Yes", "No", null, null);
        if (result == null || result == false) return;

        var requestBody = new ChangeStaffStatus(u.Item.Id, status);

        var isChanged = await _adminService.PutUserStatus(requestBody);

        if (isChanged)
        {
            Snackbar.Add("Успешно!", Severity.Success);

            Users[Users.IndexOf(u.Item)] = u.Item with { Status = status };
        }
        else
        {
            Snackbar.Add("Ошибка", Severity.Error);
        }
    }

    private string GetStringStatus(int status) 
    { 
        buffStatus = status; 
        return status == 0 ? "Пользователь" : "Модератор"; 
    }




    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

    protected override async Task OnInitializedAsync()
    {
        Users = await _adminService.GetUsers();
    }


    
}



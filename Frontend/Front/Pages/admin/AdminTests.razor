@page "/admin/tests"

@using Front.Services
@inject ISnackbar Snackbar

<div>
    <UserMenuComponent></UserMenuComponent>
</div>

<div>
    <MudButton OnClick="@CreateTest"
               Target="_blank"
               Rel="nofollow noopener"
               Variant="Variant.Outlined"
               EndIcon="@Icons.Material.Filled.Create"
               Size="Size.Large"
               Color="Color.Tertiary"
               Style="margin:20px">
        Создать Тест
    </MudButton>
    <MudDataGrid Items="@Tests" Filterable="true" FilterMode="@_filterMode" FilterCaseSensitivity="@_caseSensitivity">
        <Columns>
            <PropertyColumn Property="x => x.Title" Title="Название" Filterable="true" />
            <PropertyColumn Property="x => x.Description" Title="Описание" Filterable="true" />
            <PropertyColumn Property="x => x.Category" Title="Категории" />
            <PropertyColumn Property="x => x.Level" Title="Уровень сложности" Filterable="true" />
            <PropertyColumn Property="x => x.CreatedDate" Title="Дата" Filterable="true" />
            <PropertyColumn Property="x => x.IsPrivate" Title="Приватный" Filterable="true" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton ButtonType="ButtonType.Reset" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => Delete(context))">Удалить</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TestResponse" />
        </PagerContent>
    </MudDataGrid>

    @*     <Dialog @bind-Visible="showDialog">
    <DialogTitle>Confirm Delete</DialogTitle>
    <DialogContent>
    Are you sure you want to delete this user?
    </DialogContent>
    <DialogFooter>
    <button @onclick="DeleteUser">Yes</button>
    <button @onclick="Cancel">No</button>
    </DialogFooter>
    </Dialog> *@


    @code {
        [Inject] IAdminService _adminService { get; set; }
        [Inject] NavigationManager _navigationManager { get; set; }

        List<TestResponse> Tests = new List<TestResponse>();
        public const int ADMIN_STATUS = 2;

        DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
        DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

        protected override async Task OnInitializedAsync()
        {
            Tests = await _adminService.GetTests();
        }

        protected async Task Delete(CellContext<TestResponse> u)
        {
            //проверить есть ли Id в сущности
            var isDeleted = await _adminService.DeleteTest(u.Item.Id);

            if (isDeleted)
            {
                Snackbar.Add("Успешно!", Severity.Success);
                Tests.Remove(u.Item);
            }
            else
            {
                Snackbar.Add("Ошибка удаления!", Severity.Error);
            }


        }

        public async Task CreateTest()
        {
            _navigationManager.NavigateTo("/admin/tests/create");
        }
    }



</div>

